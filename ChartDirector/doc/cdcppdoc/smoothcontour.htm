<HTML>
<HEAD>
<Title>Continuous Contour Coloring</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Continuous Contour Coloring</p>
<hr class="separator">
<div class="content">
<img src="images/smoothcontour.jpg">
<br><br>
This example demonstrates continuous coloring of the <a href="ContourLayer.htm">ContourLayer</a>.<br><br>
By default, a contour layer will be discretely colored, which means the color will change in discrete steps according to the z level. In continuous coloring, the color will change continuously according to the z level. Continuous coloring can be enabled using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a> or <a href="ColorAxis.setColorScale.htm">ColorAxis.setColorScale</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/smoothcontour". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"
#include &lt;math.h&gt;

int main(int argc, char *argv[])
{
    // The x and y coordinates of the grid
    double dataX[] = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    double dataY[] = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // The values at the grid points. In this example, we will compute the values using the formula
    // z = Sin(x / 2) * Sin(y / 2).
    double dataZ[(int)(sizeof(dataX) / sizeof(dataX[0])) * (int)(sizeof(dataY) / sizeof(dataY[0]))];
    for(int yIndex = 0; yIndex &lt; (int)(sizeof(dataY) / sizeof(dataY[0])); ++yIndex) {
        double y = dataY[yIndex];
        for(int xIndex = 0; xIndex &lt; (int)(sizeof(dataX) / sizeof(dataX[0])); ++xIndex) {
            double x = dataX[xIndex];
            dataZ[yIndex * (int)(sizeof(dataX) / sizeof(dataX[0])) + xIndex] = sin(x / 2.0) * sin(y
                 / 2.0);
        }
    }

    // Create a XYChart object of size 600 x 500 pixels
    XYChart *c = new XYChart(600, 500);

    // Add a title to the chart using 18 points Times New Roman Bold Italic font
    c-&gt;addTitle("Nano Lattice Twister Field Intensity        ", "timesbi.ttf", 18);

    // Set the plotarea at (75, 40) and of size 400 x 400 pixels. Use semi-transparent black
    // (80000000) dotted lines for both horizontal and vertical grid lines
    c-&gt;setPlotArea(75, 40, 400, 400, -1, -1, -1, c-&gt;dashLineColor(0x80000000, Chart::DotLine), -1);

    // Set x-axis and y-axis title using 12 points Arial Bold Italic font
    c-&gt;xAxis()-&gt;setTitle("Lattice X Direction (nm)", "arialbi.ttf", 12);
    c-&gt;yAxis()-&gt;setTitle("Lattice Y Direction (nm)", "arialbi.ttf", 12);

    // Set x-axis and y-axis labels to use Arial Bold font
    c-&gt;xAxis()-&gt;setLabelStyle("arialbd.ttf");
    c-&gt;yAxis()-&gt;setLabelStyle("arialbd.ttf");

    // When auto-scaling, use tick spacing of 40 pixels as a guideline
    c-&gt;yAxis()-&gt;setTickDensity(40);
    c-&gt;xAxis()-&gt;setTickDensity(40);

    // Add a contour layer using the given data
    ContourLayer *layer = c-&gt;addContourLayer(DoubleArray(dataX, (int)(sizeof(dataX) / sizeof(dataX[0
        ]))), DoubleArray(dataY, (int)(sizeof(dataY) / sizeof(dataY[0]))), DoubleArray(dataZ, (int)(
        sizeof(dataZ) / sizeof(dataZ[0]))));

    // Set the contour color to transparent
    layer-&gt;setContourColor(Chart::Transparent);

    // Move the grid lines in front of the contour layer
    c-&gt;getPlotArea()-&gt;moveGridBefore(layer);

    // Add a color axis (the legend) in which the left center point is anchored at (495, 240). Set
    // the length to 370 pixels and the labels on the right side.
    ColorAxis *cAxis = layer-&gt;setColorAxis(495, 240, Chart::Left, 370, Chart::Right);

    // Add a bounding box to the color axis using light grey (eeeeee) as the background and dark
    // grey (444444) as the border.
    cAxis-&gt;setBoundingBox(0xeeeeee, 0x444444);

    // Add a title to the color axis using 12 points Arial Bold Italic font
    cAxis-&gt;setTitle("Twist Pressure (Twist-Volt)", "arialbi.ttf", 12);

    // Set color axis labels to use Arial Bold font
    cAxis-&gt;setLabelStyle("arialbd.ttf");

    // Use smooth gradient coloring
    cAxis-&gt;setColorGradient(true);

    // Output the chart
    c-&gt;makeChart("smoothcontour.jpg");

    //free up resources
    delete c;
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
