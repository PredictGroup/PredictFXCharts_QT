<HTML>
<HEAD>
<Title>Contour Interpolation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Contour Interpolation</p>
<hr class="separator">
<div class="content">
<img src="images/contourinterpolate0.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate1.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate2.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate3.jpg">
<br><br>
This example demonstrates spline and linear surface interpolation, and discrete and continuous coloring for the <a href="ContourLayer.htm">ContourLayer</a>.<br><br>
The input to the contour layer are the z values at certain (x, y) points. To draw the contour and to color the layer, it is necessarily to know the z values at all pixels in the xy plane. ChartDirector uses surface interpolation to compute the z values at all pixels from the given data points. Two types of interpolation - spline and linear - are supported. They can be configured using <a href="ContourLayer.setSmoothInterpolation.htm">ContourLayer.setSmoothInterpolation</a>.<br><br>
The coloring of the contour layer can be discrete or continuous, configurable using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a> or <a href="ColorAxis.setColorScale.htm">ColorAxis.setColorScale</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/contourinterpolate". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"
#include &lt;math.h&gt;

void createChart(int chartIndex, const char *filename)
{
    // The x and y coordinates of the grid
    double dataX[] = {-4, -3, -2, -1, 0, 1, 2, 3, 4};
    double dataY[] = {-4, -3, -2, -1, 0, 1, 2, 3, 4};

    // The values at the grid points. In this example, we will compute the values using the formula
    // z = Sin(x * pi / 3) * Sin(y * pi / 3).
    double dataZ[(int)(sizeof(dataX) / sizeof(dataX[0])) * (int)(sizeof(dataY) / sizeof(dataY[0]))];
    for(int yIndex = 0; yIndex &lt; (int)(sizeof(dataY) / sizeof(dataY[0])); ++yIndex) {
        double y = dataY[yIndex];
        for(int xIndex = 0; xIndex &lt; (int)(sizeof(dataX) / sizeof(dataX[0])); ++xIndex) {
            double x = dataX[xIndex];
            dataZ[yIndex * (int)(sizeof(dataX) / sizeof(dataX[0])) + xIndex] = sin(x * 3.1416 / 3) *
                sin(y * 3.1416 / 3);
        }
    }

    // Create a XYChart object of size 360 x 360 pixels
    XYChart *c = new XYChart(360, 360);

    // Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent black
    // (c0000000) for both horizontal and vertical grid lines
    c-&gt;setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1);

    // Add a contour layer using the given data
    ContourLayer *layer = c-&gt;addContourLayer(DoubleArray(dataX, (int)(sizeof(dataX) / sizeof(dataX[0
        ]))), DoubleArray(dataY, (int)(sizeof(dataY) / sizeof(dataY[0]))), DoubleArray(dataZ, (int)(
        sizeof(dataZ) / sizeof(dataZ[0]))));

    // Set the x-axis and y-axis scale
    c-&gt;xAxis()-&gt;setLinearScale(-4, 4, 1);
    c-&gt;yAxis()-&gt;setLinearScale(-4, 4, 1);

    if (chartIndex == 0) {
        // Discrete coloring, spline surface interpolation
        c-&gt;addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12);
    } else if (chartIndex == 1) {
        // Discrete coloring, linear surface interpolation
        c-&gt;addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12);
        layer-&gt;setSmoothInterpolation(false);
    } else if (chartIndex == 2) {
        // Smooth coloring, spline surface interpolation
        c-&gt;addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12);
        layer-&gt;setContourColor(Chart::Transparent);
        layer-&gt;colorAxis()-&gt;setColorGradient(true);
    } else {
        // Discrete coloring, linear surface interpolation
        c-&gt;addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12);
        layer-&gt;setSmoothInterpolation(false);
        layer-&gt;setContourColor(Chart::Transparent);
        layer-&gt;colorAxis()-&gt;setColorGradient(true);
    }

    // Output the chart
    c-&gt;makeChart(filename);

    //free up resources
    delete c;
}

int main(int argc, char *argv[])
{
    createChart(0, "contourinterpolate0.jpg");
    createChart(1, "contourinterpolate1.jpg");
    createChart(2, "contourinterpolate2.jpg");
    createChart(3, "contourinterpolate3.jpg");
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
