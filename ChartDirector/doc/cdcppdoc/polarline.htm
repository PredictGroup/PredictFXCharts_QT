<HTML>
<HEAD>
<Title>Polar Line Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Polar Line Chart</p>
<hr class="separator">
<div class="content">
<img src="images/polarline.png">
<br><br>
This example demonstrates a polar line chart, completed with data symbols and data labels.<br><br>
<ul><li> The grid lines in this example is circular (instead of polygonal as is in <a href="simpleradar.htm">Simple Radar Chart</a>). This is configured using <a href="PolarChart.setGridStyle.htm">PolarChart.setGridStyle</a>.<br><br>
<li> The angular scale in this example is set to 0 - 360, with spokes every 30 units. This is by using <a href="AngularAxis.setLinearScale.htm">AngularAxis.setLinearScale</a>.<br><br>
<li> The two lines in this example is added using <a href="PolarChart.addLineLayer.htm">PolarChart.addLineLayer</a> with angular coordinates of the points provided by <a href="PolarLayer.setAngles.htm">PolarLayer.setAngles</a>.<br><br>
<li> The data symbols are enabled using <a href="PolarLayer.setDataSymbol.htm">PolarLayer.setDataSymbol</a>.<br><br>
<li> The data labels are configured using <a href="PolarLayer.setDataLabelFormat.htm">PolarLayer.setDataLabelFormat</a> to consist of the radial and angular coordinates.<br><br>
<li> The data label background colors and 3D borders are configured using <a href="PolarLayer.setDataLabelStyle.htm">PolarLayer.setDataLabelStyle</a> and <a href="Box.setBackground.htm">Box.setBackground</a>.<br><br>
<li> Note that the blue line in this example is a closed loop (the default), while the red is not a loop. This is configured by using <a href="PolarLineLayer.setCloseLoop.htm">PolarLineLayer.setCloseLoop</a>.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/polarline". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

int main(int argc, char *argv[])
{
    // The data for the chart
    double data0[] = {90, 25, 40, 55, 68, 44, 79, 85, 50};
    double angles0[] = {15, 60, 110, 180, 230, 260, 260, 310, 340};

    double data1[] = {80, 91, 66, 80, 92, 87};
    double angles1[] = {40, 65, 88, 110, 150, 200};

    // Create a PolarChart object of size 460 x 500 pixels, with a grey (e0e0e0) background and 1
    // pixel 3D border
    PolarChart *c = new PolarChart(460, 500, 0xe0e0e0, 0x000000, 1);

    // Add a title to the chart at the top left corner using 15pt Arial Bold Italic font. Use a wood
    // pattern as the title background.
    c-&gt;addTitle("Polar Line Chart Demo", "arialbi.ttf", 15)-&gt;setBackground(c-&gt;patternColor(
        "wood.png"));

    // Set center of plot area at (230, 280) with radius 180 pixels, and white (ffffff) background.
    c-&gt;setPlotArea(230, 280, 180, 0xffffff);

    // Set the grid style to circular grid, with grids below the chart layers
    c-&gt;setGridStyle(false, false);

    // Add a legend box at top-center of plot area (230, 35) using horizontal layout. Use 10pt Arial
    // Bold font, with 1 pixel 3D border effect.
    LegendBox *b = c-&gt;addLegend(230, 35, false, "arialbd.ttf", 9);
    b-&gt;setAlignment(Chart::TopCenter);
    b-&gt;setBackground(Chart::Transparent, Chart::Transparent, 1);

    // Set angular axis as 0 - 360, with a spoke every 30 units
    c-&gt;angularAxis()-&gt;setLinearScale(0, 360, 30);

    // Add a blue (0xff) line layer to the chart using (data0, angle0)
    PolarLineLayer *layer0 = c-&gt;addLineLayer(DoubleArray(data0, (int)(sizeof(data0) / sizeof(data0[0
        ]))), 0x0000ff, "Close Loop Line");
    layer0-&gt;setAngles(DoubleArray(angles0, (int)(sizeof(angles0) / sizeof(angles0[0]))));

    // Set the line width to 2 pixels
    layer0-&gt;setLineWidth(2);

    // Use 11 pixel triangle symbols for the data points
    layer0-&gt;setDataSymbol(Chart::TriangleSymbol, 11);

    // Enable data label and set its format
    layer0-&gt;setDataLabelFormat("({value},{angle})");

    // Set the data label text box with light blue (0x9999ff) backgruond color and 1 pixel 3D border
    // effect
    layer0-&gt;setDataLabelStyle()-&gt;setBackground(0x9999ff, Chart::Transparent, 1);

    // Add a red (0xff0000) line layer to the chart using (data1, angle1)
    PolarLineLayer *layer1 = c-&gt;addLineLayer(DoubleArray(data1, (int)(sizeof(data1) / sizeof(data1[0
        ]))), 0xff0000, "Open Loop Line");
    layer1-&gt;setAngles(DoubleArray(angles1, (int)(sizeof(angles1) / sizeof(angles1[0]))));

    // Set the line width to 2 pixels
    layer1-&gt;setLineWidth(2);

    // Use 11 pixel diamond symbols for the data points
    layer1-&gt;setDataSymbol(Chart::DiamondSymbol, 11);

    // Set the line to open loop
    layer1-&gt;setCloseLoop(false);

    // Enable data label and set its format
    layer1-&gt;setDataLabelFormat("({value},{angle})");

    // Set the data label text box with light red (0xff9999) backgruond color and 1 pixel 3D border
    // effect
    layer1-&gt;setDataLabelStyle()-&gt;setBackground(0xff9999, Chart::Transparent, 1);

    // Output the chart
    c-&gt;makeChart("polarline.png");

    //free up resources
    delete c;
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
