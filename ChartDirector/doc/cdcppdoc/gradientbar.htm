<HTML>
<HEAD>
<Title>Gradient Bar Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Gradient Bar Shading</p>
<hr class="separator">
<div class="content">
<img src="images/gradientbar.png">
<br><br>
This example demonstrates using bar gradient shading for a horizontal bar chart. It also demonstrates using gradient color background, partially rounded frame, and automatic resizing of the plot area to fit the chart.<br><br>
<ul><li> The gradient background is achieved by using <a href="BaseChart.linearGradientColor.htm">BaseChart.linearGradientColor</a> to define the gradient color, then use <a href="BaseChart.setBackground.htm">BaseChart.setBackground</a> to set it as the chart background color.<br><br>
<li> The partially rounded frame is configured using <a href="BaseChart.setRoundedFrame.htm">BaseChart.setRoundedFrame</a>. Note that only 2 of the 4 corners are rounded.<br><br>
<li> The x-axis and y-axis are swapped using <a href="XYChart.swapXY.htm">XYChart.swapXY</a>, so the bars become horizontal.<br><br>
<li> The bar gradient effect is defined using <a href="Chart.barLighting.htm">Chart::barLighting</a>, then applied to the bars using <a href="Layer.setBorderColor.htm">Layer.setBorderColor</a>.<br><br>
<li> After the entire chart is configured, the <a href="XYChart.packPlotArea.htm">XYChart.packPlotArea</a> method is used  to adjust the plot area size, so as to fit the plot area and the axes in a given  bounding box.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/gradientbar". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

int main(int argc, char *argv[])
{
    // The data for the bar chart
    double data[] = {1350, 1600, 1950, 2300, 2700};

    // The labels for the bar chart
    const char *labels[] = {"2001", "2002", "2003", "2004", "2005"};

    // The colors for the bars
    int colors[] = {0xcc0000, 0x66aaee, 0xeebb22, 0xcccccc, 0xcc88ff};

    // Create a PieChart object of size 600 x 380 pixels.
    XYChart *c = new XYChart(600, 380);

    // Use the white on black palette, which means the default text and line colors are white
    c-&gt;setColors(Chart::whiteOnBlackPalette);

    // Use a vertical gradient color from blue (0000cc) to deep blue (000044) as background. Use
    // rounded corners of 30 pixels radius for the top-left and bottom-right corners.
    c-&gt;setBackground(c-&gt;linearGradientColor(0, 0, 0, c-&gt;getHeight(), 0x0000cc, 0x000044));
    c-&gt;setRoundedFrame(0xffffff, 30, 0, 30, 0);

    // Add a title using 18pt Times New Roman Bold Italic font. Add 6 pixels top and bottom margins
    // to the title.
    TextBox *title = c-&gt;addTitle("Annual Revenue for Star Tech", "timesbi.ttf", 18);
    title-&gt;setMargin(0, 0, 6, 6);

    // Add a separator line in white color just under the title
    c-&gt;addLine(20, title-&gt;getHeight(), c-&gt;getWidth() - 21, title-&gt;getHeight(), 0xffffff);

    // Tentatively set the plotarea at (70, 80) and of 480 x 240 pixels in size. Use transparent
    // border and white grid lines
    c-&gt;setPlotArea(70, 80, 480, 240, -1, -1, Chart::Transparent, 0xffffff);

    // Swap the axis so that the bars are drawn horizontally
    c-&gt;swapXY();

    // Add a multi-color bar chart layer using the supplied data. Use bar gradient lighting with the
    // light intensity from 0.75 to 2.0
    c-&gt;addBarLayer(DoubleArray(data, (int)(sizeof(data) / sizeof(data[0]))), IntArray(colors, (int)(
        sizeof(colors) / sizeof(colors[0]))))-&gt;setBorderColor(Chart::Transparent,
        Chart::barLighting(0.75, 2.0));

    // Set the labels on the x axis.
    c-&gt;xAxis()-&gt;setLabels(StringArray(labels, (int)(sizeof(labels) / sizeof(labels[0]))));

    // Show the same scale on the left and right y-axes
    c-&gt;syncYAxis();

    // Set the bottom y-axis title using 10pt Arial Bold font
    c-&gt;yAxis()-&gt;setTitle("USD (millions)", "arialbd.ttf", 10);

    // Set y-axes to transparent
    c-&gt;yAxis()-&gt;setColors(Chart::Transparent);
    c-&gt;yAxis2()-&gt;setColors(Chart::Transparent);

    // Disable ticks on the x-axis by setting the tick color to transparent
    c-&gt;xAxis()-&gt;setTickColor(Chart::Transparent);

    // Set the label styles of all axes to 8pt Arial Bold font
    c-&gt;xAxis()-&gt;setLabelStyle("arialbd.ttf", 8);
    c-&gt;yAxis()-&gt;setLabelStyle("arialbd.ttf", 8);
    c-&gt;yAxis2()-&gt;setLabelStyle("arialbd.ttf", 8);

    // Adjust the plot area size, such that the bounding box (inclusive of axes) is 30 pixels from
    // the left edge, 25 pixels below the title, 50 pixels from the right edge, and 25 pixels from
    // the bottom edge.
    c-&gt;packPlotArea(30, title-&gt;getHeight() + 25, c-&gt;getWidth() - 50, c-&gt;getHeight() - 25);

    // Output the chart
    c-&gt;makeChart("gradientbar.png");

    //free up resources
    delete c;
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
