<HTML>
<HEAD>
<Title>V-Bar Meter Orientation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">V-Bar Meter Orientation</p>
<hr class="separator">
<div class="content">
<img src="images/vbarmeterorientation0.png">&nbsp;&nbsp;<img src="images/vbarmeterorientation1.png">&nbsp;&nbsp;<img src="images/vbarmeterorientation2.png">&nbsp;&nbsp;<img src="images/vbarmeterorientation3.png">
<br><br>
This example demonstration various orientations for vertical bar meters.<br><br>
In a vertical bar meter, the scale labels can be positioned on the left or right side of the meter scale. This is controlled by the last argument to <a href="LinearMeter.setMeter.htm">LinearMeter.setMeter</a>, which can be <a href="Chart.Left.htm">Left</a> or <a href="Chart.Right.htm">Right</a>. The color scale can also be position on the same or opposite side as the scale labels.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/vbarmeterorientation". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

void createChart(int chartIndex, const char *filename)
{
    // The value to display on the meter
    double value = 74.25;

    // Bar colors of the meters
    int barColor[] = {0x2299ff, 0x00ee00, 0xaa66ee, 0xff7711};

    // Create a LinearMeter object of size 70 x 240 pixels with very light grey (0xeeeeee)
    // backgruond and a grey (0xaaaaaa) 3-pixel thick rounded frame
    LinearMeter *m = new LinearMeter(70, 240, 0xeeeeee, 0xaaaaaa);
    m-&gt;setRoundedFrame(Chart::Transparent);
    m-&gt;setThickFrame(3);

    // This example demonstrates putting the text labels at the left or right side of the meter
    // scale, and putting the color scale on the same side as the labels or on opposite side.
    int alignment[] = {Chart::Left, Chart::Left, Chart::Right, Chart::Right};
    int meterXPos[] = {28, 38, 12, 21};
    int labelGap[] = {2, 12, 10, 2};
    int colorScalePos[] = {53, 28, 36, 10};

    // Configure the position of the meter scale and which side to put the text labels
    m-&gt;setMeter(meterXPos[chartIndex], 18, 20, 205, alignment[chartIndex]);

    // Set meter scale from 0 - 100, with a tick every 10 units
    m-&gt;setScale(0, 100, 10);

    // To put the color scale on the same side as the text labels, we need to increase the gap
    // between the labels and the meter scale to make room for the color scale
    m-&gt;setLabelPos(false, labelGap[chartIndex]);

    // Add a smooth color scale to the meter
    double smoothColorScale[] = {0, 0x0000ff, 25, 0x0088ff, 50, 0x00ff00, 75, 0xdddd00, 100,
        0xff0000};
    m-&gt;addColorScale(DoubleArray(smoothColorScale, (int)(sizeof(smoothColorScale) / sizeof(
        smoothColorScale[0]))), colorScalePos[chartIndex], 6);

    // Add a bar from 0 to value with glass effect and 4 pixel rounded corners
    m-&gt;addBar(0, value, barColor[chartIndex], Chart::glassEffect(Chart::NormalGlare, Chart::Left), 4
        );

    // Output the chart
    m-&gt;makeChart(filename);

    //free up resources
    delete m;
}

int main(int argc, char *argv[])
{
    createChart(0, "vbarmeterorientation0.png");
    createChart(1, "vbarmeterorientation1.png");
    createChart(2, "vbarmeterorientation2.png");
    createChart(3, "vbarmeterorientation3.png");
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
