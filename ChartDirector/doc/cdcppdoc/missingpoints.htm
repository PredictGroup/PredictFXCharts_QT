<HTML>
<HEAD>
<Title>Missing Data Points</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Missing Data Points</p>
<hr class="separator">
<div class="content">
<img src="images/missingpoints.jpg">
<br><br>
This example demonstrates various methods to representing missing data points. It also demonstrates automatic resizing of the plot area to fit the chart.<br><br>
In ChartDirector, a data series may contain missing values, represented using the <a href="Chart.NoValue.htm">NoValue</a> predefined constant. In a line layer, by default, a missing value is represented as a gap in the line. In other words, the line will be broken. <a href="LineLayer.setGapColor.htm">LineLayer.setGapColor</a> can be used to configure the line layer to join through the NoValue point instead, using a line segment that can be of a different color and/or style.<br><br>
In this example, the three data series all contain <a href="Chart.NoValue.htm">NoValue</a> points. The red line demonstrates the default behaviour of using a gap to representing the NoValue point. The green line demonstrates joining through the NoValue point with a dash line. The orange line demonstrates joining through the NoValue point with the same line style as for joining normal data points.<br><br>
After the entire chart is configured, the <a href="XYChart.packPlotArea.htm">XYChart.packPlotArea</a> method is used to adjust the plot area size, so as to fit the plot area and the axes in a given bounding box.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/missingpoints". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

int main(int argc, char *argv[])
{
    // The data for the chart
    double data0[] = {42, 49, Chart::NoValue, 38, 64, 56, 29, 41, 44, 57};
    double data1[] = {65, 75, 47, 34, 42, 49, 73, Chart::NoValue, 90, 69, 66, 78};
    double data2[] = {Chart::NoValue, Chart::NoValue, 25, 28, 38, 20, 22, Chart::NoValue, 25, 33,
        30, 24};
    const char *labels[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
        "Nov", "Dec"};

    // Create a XYChart object of size 600 x 360 pixels. Set background color to brushed silver,
    // with a 2 pixel 3D border. Use rounded corners.
    XYChart *c = new XYChart(600, 360, Chart::brushedSilverColor(), Chart::Transparent, 2);
    c-&gt;setRoundedFrame();

    // Add a title using 18pt Times New Roman Bold Italic font. #Set top/bottom margins to 6 pixels.
    TextBox *title = c-&gt;addTitle("Product Line Global Revenue", "timesbi.ttf", 18);
    title-&gt;setMargin(0, 0, 6, 6);

    // Add a separator line just under the title
    c-&gt;addLine(10, title-&gt;getHeight(), c-&gt;getWidth() - 11, title-&gt;getHeight(), Chart::LineColor);

    // Add a legend box where the top-center is anchored to the horizontal center of the chart, just
    // under the title. Use horizontal layout and 10 points Arial Bold font, and transparent
    // background and border.
    LegendBox *legendBox = c-&gt;addLegend(c-&gt;getWidth() / 2, title-&gt;getHeight(), false, "arialbd.ttf",
        10);
    legendBox-&gt;setAlignment(Chart::TopCenter);
    legendBox-&gt;setBackground(Chart::Transparent, Chart::Transparent);

    // Tentatively set the plotarea at (70, 75) and of 460 x 240 pixels in size. Use transparent
    // border and black (000000) grid lines
    c-&gt;setPlotArea(70, 75, 460, 240, -1, -1, Chart::Transparent, 0x000000, -1);

    // Set the x axis labels
    c-&gt;xAxis()-&gt;setLabels(StringArray(labels, (int)(sizeof(labels) / sizeof(labels[0]))));

    // Show the same scale on the left and right y-axes
    c-&gt;syncYAxis();

    // Set y-axis tick density to 30 pixels. ChartDirector auto-scaling will use this as the
    // guideline when putting ticks on the y-axis.
    c-&gt;yAxis()-&gt;setTickDensity(30);

    // Set all axes to transparent
    c-&gt;xAxis()-&gt;setColors(Chart::Transparent);
    c-&gt;yAxis()-&gt;setColors(Chart::Transparent);
    c-&gt;yAxis2()-&gt;setColors(Chart::Transparent);

    // Set the x-axis margins to 15 pixels, so that the horizontal grid lines can extend beyond the
    // leftmost and rightmost vertical grid lines
    c-&gt;xAxis()-&gt;setMargin(15, 15);

    // Set axis label style to 8pt Arial Bold
    c-&gt;xAxis()-&gt;setLabelStyle("arialbd.ttf", 8);
    c-&gt;yAxis()-&gt;setLabelStyle("arialbd.ttf", 8);
    c-&gt;yAxis2()-&gt;setLabelStyle("arialbd.ttf", 8);

    // Add axis title using 10pt Arial Bold Italic font
    c-&gt;yAxis()-&gt;setTitle("Revenue in USD millions", "arialbi.ttf", 10);
    c-&gt;yAxis2()-&gt;setTitle("Revenue in USD millions", "arialbi.ttf", 10);

    // Add the first line. The missing data will be represented as gaps in the line (the default
    // behaviour)
    LineLayer *layer0 = c-&gt;addLineLayer();
    layer0-&gt;addDataSet(DoubleArray(data0, (int)(sizeof(data0) / sizeof(data0[0]))), 0xff0000,
        "Quantum Computer")-&gt;setDataSymbol(Chart::GlassSphere2Shape, 11);
    layer0-&gt;setLineWidth(3);

    // Add the second line. The missing data will be represented by using dash lines to bridge the
    // gap
    LineLayer *layer1 = c-&gt;addLineLayer();
    layer1-&gt;addDataSet(DoubleArray(data1, (int)(sizeof(data1) / sizeof(data1[0]))), 0x00ff00,
        "Atom Synthesizer")-&gt;setDataSymbol(Chart::GlassSphere2Shape, 11);
    layer1-&gt;setLineWidth(3);
    layer1-&gt;setGapColor(c-&gt;dashLineColor(0x00ff00));

    // Add the third line. The missing data will be ignored - just join the gap with the original
    // line style.
    LineLayer *layer2 = c-&gt;addLineLayer();
    layer2-&gt;addDataSet(DoubleArray(data2, (int)(sizeof(data2) / sizeof(data2[0]))), 0xff6600,
        "Proton Cannon")-&gt;setDataSymbol(Chart::GlassSphere2Shape, 11);
    layer2-&gt;setLineWidth(3);
    layer2-&gt;setGapColor(Chart::SameAsMainColor);

    // layout the legend so we can get the height of the legend box
    c-&gt;layoutLegend();

    // Adjust the plot area size, such that the bounding box (inclusive of axes) is 15 pixels from
    // the left edge, just under the legend box, 16 pixels from the right edge, and 25 pixels from
    // the bottom edge.
    c-&gt;packPlotArea(15, legendBox-&gt;getTopY() + legendBox-&gt;getHeight(), c-&gt;getWidth() - 16,
        c-&gt;getHeight() - 25);

    // Output the chart
    c-&gt;makeChart("missingpoints.jpg");

    //free up resources
    delete c;
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
