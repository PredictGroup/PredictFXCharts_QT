<HTML>
<HEAD>
<Title>Realtime Chart with Zooming and Scrolling (QT)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Realtime Chart with Zooming and Scrolling (QT)</p>
<hr class="separator">
<div class="content"><img src="images/realtimezoomscroll_qt.png"><br><br>
<div style="background-color:#cccccc;width:99%;padding:10px">
<b><font color="#FF0000">NOTE:</font></b> This section describes Realtime Chart with Zooming and Scrolling for QT only. For MFC, please refer to <a href="realtimezoomscroll.htm">Realtime Chart with Zooming and Scrolling (MFC)</a>.
</div><br>
This example demonstrates a zoomable and scrollable realtime chart with configurable chart update rate. The chart is zoomable and scrollable and include a track cursor like that in the <a href="zoomscrolltrackqt.htm">Zooming and Scrolling with Track Line (1) (QT)</a> example. It can zoom and scroll by clicking and dragging on the chart, by using the mouse wheel, and by using the scroll bar. The track cursor updates the legend dynamically to display the data values as the mouse cursor moves over the chart.<br><br>
The realtime data in this example are produced by a random number generator driven with a timer. The values are appended to data arrays which are used for creating the chart. If the arrays are full, the earliest 5% of the data will be removed from them to leave space for new data. The display is updated by a second timer. This allows the display update rate to be configurable independent of the data rate.<br><br>
As this chart is zoomable and scrollable, when new data arrives, in addition to updating the chart, the viewport and the scrollbar would need to update to reflect the updated data range. In this example, two alternative update methods are used depending on what is currently displayed:<br><br>
<ul>
<li>If the chart is displaying the latest data, when new data come in, the viewport will be updated to continue displaying the latest data. In other words, the chart will scroll when new data arrives. This is by updating the viewport using <a href="ViewPortManager.updateFullRangeH.htm">ViewPortManager.updateFullRangeH</a> with <a href="Chart.ScrollWithMax.htm">ScrollWithMax</a>.<br><br>
<li>If the chart has been scrolled back to display older data, when new data come in, the viewport will be updated so that the chart will remain unchanged. This is to allow the user to view older data without the chart constantly moving. This is achieved by updating the viewport using <a href="ViewPortManager.updateFullRangeH.htm">ViewPortManager.updateFullRangeH</a> with <a href="Chart.KeepVisibleRange.htm">KeepVisibleRange</a>.<br><br>
</ul>
The track cursor drawing code is essentially the same as that in <a href="tracklegend.htm">Track Line with Legend (MFC)</a>. Please refer to that example for the explanation of the code.
</div><p class="heading1a">Source Code Listing</p><div class="content">
The following is the main source code of this demo. The complete QT  project is in "qtdemo/realtimezoomscroll".<br><br>
[File: qtdemo/realtimezoomscroll/realtimezoomscroll.cpp]<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include &lt;QApplication&gt;
#include &lt;QButtonGroup&gt;
#include &lt;QIcon&gt;
#include &lt;QPushButton&gt;
#include &lt;QComboBox&gt;
#include &lt;QFileDialog&gt;
#include "realtimezoomscroll.h"
#include "chartdir.h"
#include &lt;math.h&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;

using namespace std;


int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    app.setStyleSheet("* {font-family:arial;font-size:11px}");
    RealTimeZoomScroll demo;
    demo.show();
    return app.exec();
}


static const int DataInterval = 250;

RealTimeZoomScroll::RealTimeZoomScroll(QWidget *parent) :
    QDialog(parent)
{
    //
    // Set up the GUI
    //

    setFixedSize(772, 380);
    setWindowTitle("Realtime Chart with Zoom/Scroll and Track Line");

    QFrame *frame = new QFrame(this);
    frame-&gt;setGeometry(4, 4, 120, 372);
    frame-&gt;setFrameShape(QFrame::StyledPanel);

    // Pointer push button
    QPushButton *pointerPB = new QPushButton(QIcon(":/pointer.png"), "Pointer", frame);
    pointerPB-&gt;setGeometry(4, 8, 112, 28);
    pointerPB-&gt;setStyleSheet("QPushButton { text-align:left; padding:5px}");
    pointerPB-&gt;setCheckable(true);

    // Zoom In push button
    QPushButton *zoomInPB = new QPushButton(QIcon(":/zoomin.png"), "Zoom In", frame);
    zoomInPB-&gt;setGeometry(4, 36, 112, 28);
    zoomInPB-&gt;setStyleSheet("QPushButton { text-align:left; padding:5px}");
    zoomInPB-&gt;setCheckable(true);

    // Zoom Out push button
    QPushButton *zoomOutPB = new QPushButton(QIcon(":/zoomout.png"), "Zoom Out", frame);
    zoomOutPB-&gt;setGeometry(4, 64, 112, 28);
    zoomOutPB-&gt;setStyleSheet("QPushButton { text-align:left; padding:5px}");
    zoomOutPB-&gt;setCheckable(true);

    // Save push button
    QPushButton *savePB = new QPushButton(QIcon(":/save.png"), "Save", frame);
    savePB-&gt;setStyleSheet("QPushButton { text-align:left; padding:5px}");
    savePB-&gt;setGeometry(4, 120, 112, 28);
    connect(savePB, SIGNAL(clicked(bool)), SLOT(onSave(bool)));

    // The Pointer/Zoom In/Zoom Out buttons form a button group
    QButtonGroup *mouseUsage = new QButtonGroup(frame);
    mouseUsage-&gt;addButton(pointerPB, Chart::MouseUsageScroll);
    mouseUsage-&gt;addButton(zoomInPB, Chart::MouseUsageZoomIn);
    mouseUsage-&gt;addButton(zoomOutPB, Chart::MouseUsageZoomOut);
    connect(mouseUsage, SIGNAL(buttonPressed(int)), SLOT(onMouseUsageChanged(int)));

    // Update Period drop down list box
    (new QLabel("Update Period (ms)", frame))-&gt;setGeometry(6, 180, 108, 16);
    QComboBox *updatePeriod = new QComboBox(frame);
    updatePeriod-&gt;setGeometry(6, 200, 108, 21);
    updatePeriod-&gt;addItems(QStringList() &lt;&lt; "250" &lt;&lt; "500" &lt;&lt; "750" &lt;&lt; "1000" &lt;&lt; "1250" &lt;&lt; "1500"
                           &lt;&lt; "1750" &lt;&lt; "2000");
    connect(updatePeriod, SIGNAL(currentIndexChanged(QString)),
            SLOT(onUpdatePeriodChanged(QString)));

    // Alpha Value display
    (new QLabel("Alpha", frame))-&gt;setGeometry(6, 280, 48, 21);
    m_ValueA = new QLabel(frame);
    m_ValueA-&gt;setGeometry(55, 280, 59, 21);
    m_ValueA-&gt;setFrameShape(QFrame::StyledPanel);

    // Beta Value display
    (new QLabel("Beta", frame))-&gt;setGeometry(6, 303, 48, 21);
    m_ValueB = new QLabel(frame);
    m_ValueB-&gt;setGeometry(55, 303, 59, 21);
    m_ValueB-&gt;setFrameShape(QFrame::StyledPanel);

    // Gamma Value display
    (new QLabel("Gamma", frame))-&gt;setGeometry(6, 326, 48, 21);
    m_ValueC = new QLabel(frame);
    m_ValueC-&gt;setGeometry(55, 326, 59, 21);
    m_ValueC-&gt;setFrameShape(QFrame::StyledPanel);

    // Chart Viewer
    m_ChartViewer = new QChartViewer(this);
    m_ChartViewer-&gt;setGeometry(128, 4, 640, 350);
    connect(m_ChartViewer, SIGNAL(viewPortChanged()), SLOT(onViewPortChanged()));
    connect(m_ChartViewer, SIGNAL(mouseMovePlotArea(QMouseEvent*)),
        SLOT(onMouseMovePlotArea(QMouseEvent*)));

    // Horizontal scroll bar
    m_HScrollBar = new QScrollBar(Qt::Horizontal, this);
    m_HScrollBar-&gt;setGeometry(128, 358, 640, 17);
    connect(m_HScrollBar, SIGNAL(valueChanged(int)), SLOT(onHScrollBarChanged(int)));

    // Clear data arrays to Chart::NoValue
    for (int i = 0; i &lt; sampleSize; ++i)
        m_timeStamps[i] = m_dataSeriesA[i] = m_dataSeriesB[i] = m_dataSeriesC[i] = Chart::NoValue;
    m_currentIndex = 0;

    // Set m_nextDataTime to the current time. It is used by the real time random number
    // generator so it knows what timestamp should be used for the next data point.
    m_nextDataTime = QDateTime::currentDateTime();

    // Initially set the mouse to drag to scroll mode.
    pointerPB-&gt;click();

    // Enable mouse wheel zooming by setting the zoom ratio to 1.1 per wheel event
    m_ChartViewer-&gt;setMouseWheelZoomRatio(1.1);

    // Set up the data acquisition mechanism. In this demo, we just use a timer to get a
    // sample every 250ms.
    QTimer *dataRateTimer = new QTimer(this);
    dataRateTimer-&gt;start(DataInterval);
    connect(dataRateTimer, SIGNAL(timeout()), SLOT(onDataTimer()));

    // Set up the chart update timer
    m_ChartUpdateTimer = new QTimer(this);
    connect(m_ChartUpdateTimer, SIGNAL(timeout()), SLOT(onChartUpdateTimer()));

    // Can start now
    updatePeriod-&gt;setCurrentIndex(3);
    m_ChartUpdateTimer-&gt;start();
}

RealTimeZoomScroll::~RealTimeZoomScroll()
{
    delete m_ChartViewer-&gt;getChart();   
}

//
// The Pointer, Zoom In or Zoom out button is pressed
//
void RealTimeZoomScroll::onMouseUsageChanged(int mouseUsage)
{
    m_ChartViewer-&gt;setMouseUsage(mouseUsage);
}

//
// The Save button is pressed
//
void RealTimeZoomScroll::onSave(bool)
{
    QString fileName = QFileDialog::getSaveFileName(this, "Save", "chartdirector_demo",
        "PNG (*.png);;JPG (*.jpg);;GIF (*.gif);;BMP (*.bmp);;SVG (*.svg);;PDF (*.pdf)");

    if (!fileName.isEmpty())
    {
        // Save the chart
        BaseChart *c = m_ChartViewer-&gt;getChart();
        if (0 != c)
            c-&gt;makeChart(fileName.toUtf8().constData());
    }
}

//
// User changes the chart update period
//
void RealTimeZoomScroll::onUpdatePeriodChanged(QString text)
{
    m_ChartUpdateTimer-&gt;start(text.toInt());
}

//
// The data acquisition routine. In this demo, this is invoked every 250ms.
//
void RealTimeZoomScroll::onDataTimer()
{
    // The current time
    QDateTime now = QDateTime::currentDateTime();

    // This is our formula for the random number generator
    do
    {
        // We need the currentTime in millisecond resolution
        double currentTime = Chart::chartTime2(m_nextDataTime.toTime_t())
                             + m_nextDataTime.time().msec() / 250 * 0.25;

        // Get a data sample
        double p = currentTime * 4;
        double dataA = 20 + cos(p * 129241) * 10 + 1 / (cos(p) * cos(p) + 0.01);
        double dataB = 150 + 100 * sin(p / 27.7) * sin(p / 10.1);
        double dataC = 150 + 100 * cos(p / 6.7) * cos(p / 11.9);

        // In this demo, if the data arrays are full, the oldest 5% of data are discarded.
        if (m_currentIndex &gt;= sampleSize)
        {
            m_currentIndex = sampleSize * 95 / 100 - 1;

            for(int i = 0; i &lt; m_currentIndex; ++i)
            {
                int srcIndex = i + sampleSize - m_currentIndex;
                m_timeStamps[i] = m_timeStamps[srcIndex];
                m_dataSeriesA[i] = m_dataSeriesA[srcIndex];
                m_dataSeriesB[i] = m_dataSeriesB[srcIndex];
                m_dataSeriesC[i] = m_dataSeriesC[srcIndex];
            }
        }

        // Store the new values in the current index position, and increment the index.
        m_timeStamps[m_currentIndex] = currentTime;
        m_dataSeriesA[m_currentIndex] = dataA;
        m_dataSeriesB[m_currentIndex] = dataB;
        m_dataSeriesC[m_currentIndex] = dataC;
        ++m_currentIndex;

        m_nextDataTime = m_nextDataTime.addMSecs(DataInterval);
    }
    while (m_nextDataTime &lt; now);

    //
    // We provide some visual feedback to the latest numbers generated, so you can see the
    // data being generated.
    //
    m_ValueA-&gt;setText(QString::number(m_dataSeriesA[m_currentIndex - 1], 'f', 2));
    m_ValueB-&gt;setText(QString::number(m_dataSeriesB[m_currentIndex - 1], 'f', 2));
    m_ValueC-&gt;setText(QString::number(m_dataSeriesC[m_currentIndex - 1], 'f', 2));
}

//
// Update the chart and the viewport periodically
//
void RealTimeZoomScroll::onChartUpdateTimer()
{
    if (m_currentIndex &gt;= 0)
    {
        //
        // As we added more data, we may need to update the full range of the viewport.
        //

        double startDate = m_timeStamps[0];
        double endDate = m_timeStamps[m_currentIndex - 1];

        // Use the initialFullRange (which is 60 seconds in this demo) if this is sufficient.
        double duration = endDate - startDate;
        if (duration &lt; initialFullRange)
            endDate = startDate + initialFullRange;

        // Update the full range to reflect the actual duration of the data. In this case,
        // if the view port is viewing the latest data, we will scroll the view port as new
        // data are added. If the view port is viewing historical data, we would keep the
        // axis scale unchanged to keep the chart stable.
        int updateType = Chart::ScrollWithMax;
        if (m_ChartViewer-&gt;getViewPortLeft() + m_ChartViewer-&gt;getViewPortWidth() &lt; 0.999)
            updateType = Chart::KeepVisibleRange;
        bool scaleHasChanged = m_ChartViewer-&gt;updateFullRangeH("x", startDate, endDate, updateType);

        // Set the zoom in limit as a ratio to the full range
        m_ChartViewer-&gt;setZoomInWidthLimit(zoomInLimit / (m_ChartViewer-&gt;getValueAtViewPort("x", 1) -
            m_ChartViewer-&gt;getValueAtViewPort("x", 0)));

        // Trigger the viewPortChanged event to update the display if the axis scale has changed
        // or if new data are added to the existing axis scale.
        if (scaleHasChanged || (duration &lt; initialFullRange))
            m_ChartViewer-&gt;updateViewPort(true, false);
    }
}

//
// View port changed event
//
void RealTimeZoomScroll::onViewPortChanged()
{
    // In addition to updating the chart, we may also need to update other controls that
    // changes based on the view port.
    updateControls(m_ChartViewer);

    // Update the chart if necessary
    if (m_ChartViewer-&gt;needUpdateChart())
        drawChart(m_ChartViewer);
}

//
// User clicks on the the horizontal scroll bar
//
void RealTimeZoomScroll::onHScrollBarChanged(int value)
{
    if (!m_ChartViewer-&gt;isInViewPortChangedEvent())
    {
        // Set the view port based on the scroll bar
        int scrollBarLen = m_HScrollBar-&gt;maximum() + m_HScrollBar-&gt;pageStep();
        m_ChartViewer-&gt;setViewPortLeft(value / (double)scrollBarLen);

        // Update the chart display without updating the image maps. (We can delay updating
        // the image map until scrolling is completed and the chart display is stable.)
        m_ChartViewer-&gt;updateViewPort(true, false);
    }
}

//
// Update controls in the user interface when the view port changed
//
void RealTimeZoomScroll::updateControls(QChartViewer *viewer)
{
    // The logical length of the scrollbar. It can be any large value. The actual value does
    // not matter.
    const int scrollBarLen = 1000000000;

    // Update the horizontal scroll bar
    m_HScrollBar-&gt;setEnabled(viewer-&gt;getViewPortWidth() &lt; 1);
    m_HScrollBar-&gt;setPageStep((int)ceil(viewer-&gt;getViewPortWidth() * scrollBarLen));
    m_HScrollBar-&gt;setSingleStep(min(scrollBarLen / 100, m_HScrollBar-&gt;pageStep()));
    m_HScrollBar-&gt;setRange(0, scrollBarLen - m_HScrollBar-&gt;pageStep());
    m_HScrollBar-&gt;setValue((int)(0.5 + viewer-&gt;getViewPortLeft() * scrollBarLen));
}

//
// Draw chart
//
void RealTimeZoomScroll::drawChart(QChartViewer *viewer)
{
    // Get the start date and end date that are visible on the chart.
    double viewPortStartDate = viewer-&gt;getValueAtViewPort("x", viewer-&gt;getViewPortLeft());
    double viewPortEndDate = viewer-&gt;getValueAtViewPort("x", viewer-&gt;getViewPortLeft() +
        viewer-&gt;getViewPortWidth());

    // Extract the part of the data arrays that are visible.
    DoubleArray viewPortTimeStamps;
    DoubleArray viewPortDataSeriesA;
    DoubleArray viewPortDataSeriesB;
    DoubleArray viewPortDataSeriesC;

    if (m_currentIndex &gt; 0)
    {
        // Get the array indexes that corresponds to the visible start and end dates
        int startIndex = (int)floor(Chart::bSearch(DoubleArray(m_timeStamps, m_currentIndex), viewPortStartDate));
        int endIndex = (int)ceil(Chart::bSearch(DoubleArray(m_timeStamps, m_currentIndex), viewPortEndDate));
        int noOfPoints = endIndex - startIndex + 1;

        // Extract the visible data
        viewPortTimeStamps = DoubleArray(m_timeStamps+ startIndex, noOfPoints);
        viewPortDataSeriesA = DoubleArray(m_dataSeriesA + startIndex, noOfPoints);
        viewPortDataSeriesB = DoubleArray(m_dataSeriesB + startIndex, noOfPoints);
        viewPortDataSeriesC = DoubleArray(m_dataSeriesC + startIndex, noOfPoints);
    }

    //
    // At this stage, we have extracted the visible data. We can use those data to plot the chart.
    //

    //================================================================================
    // Configure overall chart appearance.
    //================================================================================

    // Create an XYChart object of size 640 x 350 pixels
    XYChart *c = new XYChart(640, 350);

    // Set the plotarea at (55, 50) with width 80 pixels less than chart width, and height 80 pixels
    // less than chart height. Use a vertical gradient from light blue (f0f6ff) to sky blue (a0c0ff)
    // as background. Set border to transparent and grid lines to white (ffffff).
    c-&gt;setPlotArea(55, 50, c-&gt;getWidth() - 85, c-&gt;getHeight() - 80, c-&gt;linearGradientColor(0, 50, 0,
        c-&gt;getHeight() - 35, 0xf0f6ff, 0xa0c0ff), -1, Chart::Transparent, 0xffffff, 0xffffff);

    // As the data can lie outside the plotarea in a zoomed chart, we need enable clipping.
    c-&gt;setClipping();

    // Add a title to the chart using 18pt Arial font
    c-&gt;addTitle("    Realtime Chart with Zoom/Scroll and Track Line", "arial.ttf", 18);

    // Add a legend box at (55, 25) using horizontal layout. Use 10pt Arial Bold as font. Set the
    // background and border color to transparent and use line style legend key.
    LegendBox *b = c-&gt;addLegend(55, 25, false, "arialbd.ttf", 10);
    b-&gt;setBackground(Chart::Transparent);
    b-&gt;setLineStyleKey();

    // Set the x and y axis stems to transparent and the label font to 10pt Arial
    c-&gt;xAxis()-&gt;setColors(Chart::Transparent);
    c-&gt;yAxis()-&gt;setColors(Chart::Transparent);
    c-&gt;xAxis()-&gt;setLabelStyle("arial.ttf", 10);
    c-&gt;yAxis()-&gt;setLabelStyle("arial.ttf", 10);

    // Set the y-axis tick length to 0 to disable the tick and put the labels closer to the axis.
    c-&gt;yAxis()-&gt;setTickLength(0);

    // Add axis title using 12pt Arial Bold Italic font
    c-&gt;yAxis()-&gt;setTitle("Ionic Temperature (C)", "arialbd.ttf", 12);

    //================================================================================
    // Add data to chart
    //================================================================================

    //
    // In this example, we represent the data by lines. You may modify the code below to use other
    // representations (areas, scatter plot, etc).
    //

    // Add a line layer for the lines, using a line width of 2 pixels
    LineLayer *layer = c-&gt;addLineLayer();
    layer-&gt;setLineWidth(2);
    layer-&gt;setFastLineMode();

    // Now we add the 3 data series to a line layer, using the color red (ff0000), green (00cc00)
    // and blue (0000ff)
    layer-&gt;setXData(viewPortTimeStamps);
    layer-&gt;addDataSet(viewPortDataSeriesA, 0xff0000, "Alpha");
    layer-&gt;addDataSet(viewPortDataSeriesB, 0x00cc00, "Beta");
    layer-&gt;addDataSet(viewPortDataSeriesC, 0x0000ff, "Gamma");

    //================================================================================
    // Configure axis scale and labelling
    //================================================================================

    // Set the x-axis as a date/time axis with the scale according to the view port x range.
    if (m_currentIndex &gt; 0)
        c-&gt;xAxis()-&gt;setDateScale(viewPortStartDate, viewPortEndDate);

    // For the automatic axis labels, set the minimum spacing to 75/30 pixels for the x/y axis.
    c-&gt;xAxis()-&gt;setTickDensity(75);
    c-&gt;yAxis()-&gt;setTickDensity(30);

    //
    // In this demo, the time range can be from many hours to a few seconds. We can need to define
    // the date/time format the various cases.
    //

    // If all ticks are hour algined, we use "hh:nn&lt;*br*&gt;mmm dd" in bold font as the first label of
    // the Day, and "hh:nn" for other labels.
    c-&gt;xAxis()-&gt;setFormatCondition("align", 3600);
    c-&gt;xAxis()-&gt;setMultiFormat(Chart::StartOfDayFilter(), "&lt;*font=bold*&gt;{value|hh:nn&lt;*br*&gt;mmm dd}",
        Chart::AllPassFilter(), "{value|hh:nn}");

    // If all ticks are minute algined, then we use "hh:nn" as the label format.
    c-&gt;xAxis()-&gt;setFormatCondition("align", 60);
    c-&gt;xAxis()-&gt;setLabelFormat("{value|hh:nn}");

    // If all other cases, we use "hh:nn:ss" as the label format.
    c-&gt;xAxis()-&gt;setFormatCondition("else");
    c-&gt;xAxis()-&gt;setLabelFormat("{value|hh:nn:ss}");

    // We make sure the tick increment must be at least 1 second.
    c-&gt;xAxis()-&gt;setMinTickInc(1);

    //================================================================================
    // Output the chart
    //================================================================================

    // We need to update the track line too. If the mouse is moving on the chart (eg. if 
    // the user drags the mouse on the chart to scroll it), the track line will be updated
    // in the MouseMovePlotArea event. Otherwise, we need to update the track line here.
    if (!viewer-&gt;isInMouseMoveEvent())
    {
        trackLineLabel(c, (0 == viewer-&gt;getChart()) ? c-&gt;getPlotArea()-&gt;getRightX() :
            viewer-&gt;getPlotAreaMouseX()); 
    }

    // Set the chart image to the QChartViewer
    delete viewer-&gt;getChart();
    viewer-&gt;setChart(c);
}

//
// Draw track cursor when mouse is moving over plotarea
//
void RealTimeZoomScroll::onMouseMovePlotArea(QMouseEvent *)
{
    trackLineLabel((XYChart *)m_ChartViewer-&gt;getChart(), m_ChartViewer-&gt;getPlotAreaMouseX());
    m_ChartViewer-&gt;updateDisplay();
}

//
// Draw the track line with data point labels
//
void RealTimeZoomScroll::trackLineLabel(XYChart *c, int mouseX)
{
    // Clear the current dynamic layer and get the DrawArea object to draw on it.
    DrawArea *d = c-&gt;initDynamicLayer();

    // The plot area object
    PlotArea *plotArea = c-&gt;getPlotArea();

    // Get the data x-value that is nearest to the mouse, and find its pixel coordinate.
    double xValue = c-&gt;getNearestXValue(mouseX);
    int xCoor = c-&gt;getXCoor(xValue);
    if (xCoor &lt; plotArea-&gt;getLeftX())
        return;

    // Draw a vertical track line at the x-position
    d-&gt;vline(plotArea-&gt;getTopY(), plotArea-&gt;getBottomY(), xCoor, 0x888888);

    // Draw a label on the x-axis to show the track line position.
    ostringstream xlabel;
    xlabel &lt;&lt; "&lt;*font,bgColor=000000*&gt; " &lt;&lt; c-&gt;xAxis()-&gt;getFormattedLabel(xValue, "hh:nn:ss.ff")
        &lt;&lt; " &lt;*/font*&gt;";
    TTFText *t = d-&gt;text(xlabel.str().c_str(), "arialbd.ttf", 10);

    // Restrict the x-pixel position of the label to make sure it stays inside the chart image.
    int xLabelPos = max(0, min(xCoor - t-&gt;getWidth() / 2, c-&gt;getWidth() - t-&gt;getWidth()));
    t-&gt;draw(xLabelPos, plotArea-&gt;getBottomY() + 6, 0xffffff);
    t-&gt;destroy();

    // Iterate through all layers to draw the data labels
    for (int i = 0; i &lt; c-&gt;getLayerCount(); ++i) {
        Layer *layer = c-&gt;getLayerByZ(i);

        // The data array index of the x-value
        int xIndex = layer-&gt;getXIndexOf(xValue);

        // Iterate through all the data sets in the layer
        for (int j = 0; j &lt; layer-&gt;getDataSetCount(); ++j)
        {
            DataSet *dataSet = layer-&gt;getDataSetByZ(j);
            const char *dataSetName = dataSet-&gt;getDataName();

            // Get the color, name and position of the data label
            int color = dataSet-&gt;getDataColor();
            int yCoor = c-&gt;getYCoor(dataSet-&gt;getPosition(xIndex), dataSet-&gt;getUseYAxis());

            // Draw a track dot with a label next to it for visible data points in the plot area
            if ((yCoor &gt;= plotArea-&gt;getTopY()) &amp;&amp; (yCoor &lt;= plotArea-&gt;getBottomY()) &amp;&amp; (color !=
                Chart::Transparent) &amp;&amp; dataSetName &amp;&amp; *dataSetName)
            {
                d-&gt;circle(xCoor, yCoor, 4, 4, color, color);

                ostringstream label;
                label &lt;&lt; "&lt;*font,bgColor=" &lt;&lt; hex &lt;&lt; color &lt;&lt; "*&gt; "
                    &lt;&lt; c-&gt;formatValue(dataSet-&gt;getValue(xIndex), "{value|P4}") &lt;&lt; " &lt;*font*&gt;";
                t = d-&gt;text(label.str().c_str(), "arialbd.ttf", 10);

                // Draw the label on the right side of the dot if the mouse is on the left side the
                // chart, and vice versa. This ensures the label will not go outside the chart image.
                if (xCoor &lt;= (plotArea-&gt;getLeftX() + plotArea-&gt;getRightX()) / 2)
                    t-&gt;draw(xCoor + 6, yCoor, 0xffffff, Chart::Left);
                else
                    t-&gt;draw(xCoor - 6, yCoor, 0xffffff, Chart::Right);

                t-&gt;destroy();
            }
        }
    }
}</pre></td></tr></table></div><br>
<hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
