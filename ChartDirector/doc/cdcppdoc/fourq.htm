<HTML>
<HEAD>
<Title>4 Quadrant Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">4 Quadrant Chart</p>
<hr class="separator">
<div class="content">
<img src="images/fourq.png">
<br><br>
This example demonstrates 4 quadrant charts in which the x-axis and y-axis meet at the origin at the center of the plot area.<br><br>
By default, ChartDirector puts the axes at the border of the plot area. This avoids the axis labels and the chart contents from overlapping and making the chart hard to read.<br><br>
In some cases, it may be desirable to have one or both axes to intersect with the zero point of the other axis, where the zero point can be inside the plot area. In ChartDirector, these kinds of axis configurations may be set up with <a href="XYChart.setAxisAtOrigin.htm">XYChart.setAxisAtOrigin</a>.<br><br>
This example also demonstrates using <a href="PlotArea.set4QBgColor.htm">PlotArea.set4QBgColor</a> to specify 4 background colors for the 4 quadrants.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/fourq". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

int main(int argc, char *argv[])
{
    // XY points for the scatter chart
    double dataX0[] = {10, 15, 6, -12, 14, -8, 13, -13, 16, 12, 10.5};
    double dataY0[] = {130, 150, 80, 110, -110, -105, -130, 115, -170, 125, 125};

    double dataX1[] = {6, 7, -4, 3.5, 7, 8, -9, -10, -12, 11, 8};
    double dataY1[] = {65, -40, -40, 45, -70, -80, 80, 10, -100, 105, 60};

    double dataX2[] = {-10, -12, 11, 8, 6, 12, -4, 3.5, 7, 8, -9};
    double dataY2[] = {65, -80, -40, 45, -70, -80, 80, 90, -100, 105, 60};

    // Create a XYChart object of size 600 x 300 pixels, with a light blue (ccccff) background, a
    // black border, and 1 pixel 3D border effect
    XYChart *c = new XYChart(600, 480, 0xccccff, 0x000000, 1);

    // Add a title box to the chart using 16pt Arial Bold Italic font, with white text on deep blue
    // background
    c-&gt;addTitle("Four Quadrant Chart Demonstration", "arialbi.ttf", 16, 0xffffff)-&gt;setBackground(
        0x000080);

    // Set the plotarea at (20, 60) and of size 560 x 360 pixels, with grey (808080) border, and
    // light grey (c0c0c0) horizontal and vertical grid lines. Set 4 quadrant coloring, where the
    // colors of the quadrants alternate between lighter and deeper grey (dddddd/eeeeee)
    c-&gt;setPlotArea(20, 60, 560, 360, -1, -1, 0x808080, 0xc0c0c0, 0xc0c0c0)-&gt;set4QBgColor(0xdddddd,
        0xeeeeee, 0xdddddd, 0xeeeeee);

    // Set 4 quadrant mode, with both x and y axes symetrical around the origin
    c-&gt;setAxisAtOrigin(Chart::XYAxisAtOrigin, Chart::XAxisSymmetric + Chart::YAxisSymmetric);

    // Add a legend box at (300, 460) (bottom center of the chart) with horizontal layout. Use 8pt
    // Arial Bold font.
    LegendBox *legendBox = c-&gt;addLegend(300, 460, false, "arialbd.ttf", 8);
    legendBox-&gt;setAlignment(Chart::BottomCenter);

    // Set legend box background to light grey (dddddd) with a black border
    legendBox-&gt;setBackground(0xdddddd, 0);

    // Set left/right margin to 20 pixels and top/bottom margin to 5 pixels
    legendBox-&gt;setMargin(20, 20, 5, 5);

    // Add a titles to axes
    c-&gt;xAxis()-&gt;setTitle("Alpha Index");
    c-&gt;yAxis()-&gt;setTitle("Beta Index");

    // Set axes width to 2 pixels
    c-&gt;xAxis()-&gt;setWidth(2);
    c-&gt;yAxis()-&gt;setWidth(2);

    // Add scatter layer, using 15 pixels red (ff33333) X shape symbols
    c-&gt;addScatterLayer(DoubleArray(dataX0, (int)(sizeof(dataX0) / sizeof(dataX0[0]))), DoubleArray(
        dataY0, (int)(sizeof(dataY0) / sizeof(dataY0[0]))), "Group A", Chart::Cross2Shape(), 15,
        0xff3333);

    // Add scatter layer, using 15 pixels green (33ff33) 6-sided polygon symbols
    c-&gt;addScatterLayer(DoubleArray(dataX1, (int)(sizeof(dataX1) / sizeof(dataX1[0]))), DoubleArray(
        dataY1, (int)(sizeof(dataY1) / sizeof(dataY1[0]))), "Group B", Chart::PolygonShape(6), 15,
        0x33ff33);

    // Add scatter layer, using 15 pixels blue (3333ff) triangle symbols
    c-&gt;addScatterLayer(DoubleArray(dataX2, (int)(sizeof(dataX2) / sizeof(dataX2[0]))), DoubleArray(
        dataY2, (int)(sizeof(dataY2) / sizeof(dataY2[0]))), "Group C", Chart::TriangleSymbol, 15,
        0x3333ff);

    // Output the chart
    c-&gt;makeChart("fourq.png");

    //free up resources
    delete c;
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
