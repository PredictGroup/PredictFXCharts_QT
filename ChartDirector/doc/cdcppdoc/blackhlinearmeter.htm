<HTML>
<HEAD>
<Title>Black Horizontal Linear Meters</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Black Horizontal Linear Meters</p>
<hr class="separator">
<div class="content">
<img src="images/blackhlinearmeter0.png">&nbsp;&nbsp;<img src="images/blackhlinearmeter1.png">&nbsp;&nbsp;<img src="images/blackhlinearmeter2.png">&nbsp;&nbsp;<img src="images/blackhlinearmeter3.png">&nbsp;&nbsp;<img src="images/blackhlinearmeter4.png">&nbsp;&nbsp;<img src="images/blackhlinearmeter5.png">
<br><br>
This example demonstrates horizontal bar meters in a black coloring scheme.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/blackhlinearmeter". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

void createChart(int chartIndex, const char *filename)
{
    // The value to display on the meter
    double value = 75.35;

    // Create a LinearMeter object of size 250 x 75 pixels with black background and rounded corners
    LinearMeter *m = new LinearMeter(250, 75, 0x000000);
    m-&gt;setRoundedFrame(Chart::Transparent);

    // Set the default text and line colors to white (0xffffff)
    m-&gt;setColor(Chart::TextColor, 0xffffff);
    m-&gt;setColor(Chart::LineColor, 0xffffff);

    // Set the scale region top-left corner at (14, 23), with size of 218 x 20 pixels. The scale
    // labels are located on the top (implies horizontal meter)
    m-&gt;setMeter(14, 23, 218, 20, Chart::Top);

    // Set meter scale from 0 - 100, with a tick every 10 units
    m-&gt;setScale(0, 100, 10);

    // The tick line width to 1 pixel
    m-&gt;setLineWidth(0, 1);

    // Demostrate different types of color scales and putting them at different positions
    double smoothColorScale[] = {0, 0x0000ff, 25, 0x0088ff, 50, 0x00ff00, 75, 0xdddd00, 100,
        0xff0000};
    double stepColorScale[] = {0, 0x00cc00, 50, 0xeecc00, 80, 0xdd0000, 100};
    double highLowColorScale[] = {0, 0x0000ff, 70, Chart::Transparent, 100, 0xff0000};

    if (chartIndex == 0) {
        // Add the smooth color scale at the default position
        m-&gt;addColorScale(DoubleArray(smoothColorScale, (int)(sizeof(smoothColorScale) / sizeof(
            smoothColorScale[0]))));
    } else if (chartIndex == 1) {
        // Add the smooth color scale starting at y = 23 (top of scale) with zero width and ending
        // at y = 23 with 20 pixels width
        m-&gt;addColorScale(DoubleArray(smoothColorScale, (int)(sizeof(smoothColorScale) / sizeof(
            smoothColorScale[0]))), 23, 0, 23, 20);
    } else if (chartIndex == 2) {
        // Add the high low scale at the default position
        m-&gt;addColorScale(DoubleArray(highLowColorScale, (int)(sizeof(highLowColorScale) / sizeof(
            highLowColorScale[0]))));
    } else if (chartIndex == 3) {
        // Add the smooth color scale starting at y = 33 (center of scale) with zero width and
        // ending at y = 23 with 20 pixels width
        m-&gt;addColorScale(DoubleArray(smoothColorScale, (int)(sizeof(smoothColorScale) / sizeof(
            smoothColorScale[0]))), 33, 0, 23, 20);
    } else if (chartIndex == 4) {
        // Add the step color scale at the default position
        m-&gt;addColorScale(DoubleArray(stepColorScale, (int)(sizeof(stepColorScale) / sizeof(
            stepColorScale[0]))));
    } else {
        // Add the smooth color scale starting at y = 43 (bottom of scale) with zero width and
        // ending at y = 23 with 20 pixels width
        m-&gt;addColorScale(DoubleArray(smoothColorScale, (int)(sizeof(smoothColorScale) / sizeof(
            smoothColorScale[0]))), 43, 0, 23, 20);
    }

    // Add a blue (0x0000cc) pointer with white (0xffffff) border at the specified value
    m-&gt;addPointer(value, 0x0000cc, 0xffffff);

    // Add a label left aligned to (10, 61) using 8pt Arial Bold font
    m-&gt;addText(10, 61, "Temperature C", "arialbd.ttf", 8, Chart::TextColor, Chart::Left);

    // Add a text box right aligned to (235, 61). Display the value using white (0xffffff) 8pt Arial
    // Bold font on a black (0x000000) background with depressed grey (0x444444) rounded border.
    TextBox *t = m-&gt;addText(235, 61, m-&gt;formatValue(value, "2"), "arialbd.ttf", 8, 0xffffff,
        Chart::Right);
    t-&gt;setBackground(0x000000, 0x444444, -1);
    t-&gt;setRoundedCorners(3);

    // Output the chart
    m-&gt;makeChart(filename);

    //free up resources
    delete m;
}

int main(int argc, char *argv[])
{
    createChart(0, "blackhlinearmeter0.png");
    createChart(1, "blackhlinearmeter1.png");
    createChart(2, "blackhlinearmeter2.png");
    createChart(3, "blackhlinearmeter3.png");
    createChart(4, "blackhlinearmeter4.png");
    createChart(5, "blackhlinearmeter5.png");
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
