<HTML>
<HEAD>
<Title>Symbol Line Chart (2)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (C++ Edition)</p>
<p class="heading1">Symbol Line Chart (2)</p>
<hr class="separator">
<div class="content">
<img src="images/symbolline2.png">
<br><br>
This example demonstrates using symbols to represent data points and using gradient color for plot area background.<br><br>
<ul><li> The gradient plot area background is configured by using <a href="BaseChart.linearGradientColor.htm">BaseChart.linearGradientColor</a> to define the gradient color, then use <a href="XYChart.setPlotArea.htm">XYChart.setPlotArea</a> to apply it to the plot area.<br><br>
<li> The <a href="XYChart.setPlotArea.htm">XYChart.setPlotArea</a> also sets the plot area border and grid line colors to white.<br><br>
<li> Use <a href="BaseChart.addLegend.htm">BaseChart.addLegend</a> to add a legend at the top of the chart.<br><br>
<li> Use <a href="DataSet.setDataSymbol.htm">DataSet.setDataSymbol</a> to configure symbols for the data points.<br><br>
<li> Set the line width for all lines in the layer using <a href="Layer.setLineWidth.htm">Layer.setLineWidth</a>. (To set the line width for one particular line, use <a href="DataSet.setLineWidth.htm">DataSet.setLineWidth</a>.)</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
[The following code is available in "cppdemo/symbolline2". A MFC version of the code is available in "mfcdemo/mfcdemo" (Windows edition only). A QT version of the code is available in "qtdemo/qtdemo".]
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#include "chartdir.h"

int main(int argc, char *argv[])
{
    // The data for the line chart
    double data0[] = {42, 49, 33, 38, 64, 56, 29, 41, 44, 57, 59, 42};
    double data1[] = {65, 75, 47, 34, 42, 49, 73, 62, 90, 69, 66, 78};
    double data2[] = {36, 28, 25, 28, 38, 20, 22, 30, 25, 33, 30, 24};
    const char *labels[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
        "Nov", "Dec"};

    // Create a XYChart object of size 600 x 375 pixels
    XYChart *c = new XYChart(600, 375);

    // Add a title to the chart using 18pt Times Bold Italic font
    c-&gt;addTitle("Product Line Global Revenue", "timesbi.ttf", 18);

    // Set the plotarea at (50, 55) and of 500 x 280 pixels in size. Use a vertical gradient color
    // from light blue (f9f9ff) to sky blue (aaccff) as background. Set border to transparent and
    // grid lines to white (ffffff).
    c-&gt;setPlotArea(50, 55, 500, 280, c-&gt;linearGradientColor(0, 55, 0, 335, 0xf9fcff, 0xaaccff), -1,
        Chart::Transparent, 0xffffff);

    // Add a legend box at (50, 28) using horizontal layout. Use 10pt Arial Bold as font, with
    // transparent background.
    c-&gt;addLegend(50, 28, false, "arialbd.ttf", 10)-&gt;setBackground(Chart::Transparent);

    // Set the x axis labels
    c-&gt;xAxis()-&gt;setLabels(StringArray(labels, (int)(sizeof(labels) / sizeof(labels[0]))));

    // Set y-axis tick density to 30 pixels. ChartDirector auto-scaling will use this as the
    // guideline when putting ticks on the y-axis.
    c-&gt;yAxis()-&gt;setTickDensity(30);

    // Set axis label style to 8pt Arial Bold
    c-&gt;xAxis()-&gt;setLabelStyle("arialbd.ttf", 8);
    c-&gt;yAxis()-&gt;setLabelStyle("arialbd.ttf", 8);

    // Set axis line width to 2 pixels
    c-&gt;xAxis()-&gt;setWidth(2);
    c-&gt;yAxis()-&gt;setWidth(2);

    // Add axis title using 10pt Arial Bold Italic font
    c-&gt;yAxis()-&gt;setTitle("Revenue in USD millions", "arialbi.ttf", 10);

    // Add a line layer to the chart
    LineLayer *layer = c-&gt;addLineLayer();

    // Set the line width to 3 pixels
    layer-&gt;setLineWidth(3);

    // Add the three data sets to the line layer, using circles, diamands and X shapes as symbols
    layer-&gt;addDataSet(DoubleArray(data0, (int)(sizeof(data0) / sizeof(data0[0]))), 0xff0000,
        "Quantum Computer")-&gt;setDataSymbol(Chart::CircleSymbol, 9);
    layer-&gt;addDataSet(DoubleArray(data1, (int)(sizeof(data1) / sizeof(data1[0]))), 0x00ff00,
        "Atom Synthesizer")-&gt;setDataSymbol(Chart::DiamondSymbol, 11);
    layer-&gt;addDataSet(DoubleArray(data2, (int)(sizeof(data2) / sizeof(data2[0]))), 0xff6600,
        "Proton Cannon")-&gt;setDataSymbol(Chart::Cross2Shape(), 11);

    // Output the chart
    c-&gt;makeChart("symbolline2.png");

    //free up resources
    delete c;
    return 0;
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
